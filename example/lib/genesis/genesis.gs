-- This is a simple comment.
!--
This is a block comment.
--!

!--
On this file you can define your project structure.

In order to generate the code, you need to follow the next sintaxis:

    Routes to generate the code for the models: 
    Name: Models. Ignore case. 

    Routes to generate the code for screens:
    Name: Screens. Ignore case.

    Routes to generate the code for widgets:
    Name: Widgets. Ignore case.

    All these routes will be mark with a '*'.

This structure is simple. For define the basic structure, you use tabulations as you can see on the example.
In the example, the folder (f) 'Database' is inside the folder (f) 'Domain' witch is inside the folder 'lib'.

The files (d) are files that will be generated. This files contains properites (p).

Is important to go to these files and complete the TODOs.

This package generate the basic code to use the models in the database.

You can create these model files manually, but is recommended to use this package to generate the code
because this package will generate the code for the models and the code for the database, add these models 
to the database tables and create a metadata log file to keep track of the changes.

In order to generate the screens (s) and the widgets (w) files, you will have some templates to use.
This templates are on the official documentation with examples.

________________________________________________________________________________________________________________
IMPORTANT!

-> You must add a empty line at the end of the content of the folder like you can see on the example.
This is to make easer the comprenhension of the file and to avoid errors.

-> If your tabulation spaces are less than 4, you must type 4 spaces instead. 
________________________________________________________________________________________________________________


The code generated by this package is not perfect, but is a good start point.

Enjoy it! ðŸ˜„
--!

(f) name: Domain
    (f) name: Database
        (f) name: Models, *
            (d) name: ModelExample1
                (p) name: name, type: string, primary: true
                (p) name: age, type: int, value: 10
                (p) name: groupId, type: int, foreign: true, model: Group
            (d) name: ModelExample2
                (p) name: name, type: double, primary: primary, foreign: foreign, table: table
                (p) name: name, type: bool, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, DateTime: value, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
            (d) name: ModelExample3
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
            (d) name: ModelExample4
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table
                (p) name: name, type: type, primary: primary, foreign: foreign, table: table

(f) name: Repository
    (f) name: Database
        (f) name: Entity

(f) name: Presentation
    (f) name: Screens, *
        (s) name: HomeScreen, template: Home
        (s) name: LoginScreen, state: true
    (f) name: Widgets, *
        (w) name: CustomWidget, template: Box
    